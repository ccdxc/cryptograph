properties([
    parameters([
        string(defaultValue: '', description: 'The version from PyPI to build', name: 'BUILD_VERSION')
    ]),
    pipelineTriggers([])
])

def configs = [
    [
        label: 'windows',
        versions: ['py27', 'py34', 'py35', 'py36', 'py37'],
    ],
    [
        label: 'windows64',
        versions: ['py27', 'py34', 'py35', 'py36', 'py37'],
    ],
]


def build(version, label, imageName) {
    try {
        timeout(time: 30, unit: 'MINUTES') {
            if (label.contains("windows")) {
                def pythonPath = [
                    py27: "C:\\Python27\\python.exe",
                    py34: "C:\\Python34\\python.exe",
                    py35: "C:\\Python35\\python.exe",
                    py36: "C:\\Python36\\python.exe",
                    py37: "C:\\Python37\\python.exe"
                ]
                if (version == "py35" || version == "py36" || version == "py37") {
                    opensslPaths = [
                        "windows": [
                            "include": "C:\\OpenSSL-Win32-2015\\include",
                            "lib": "C:\\OpenSSL-Win32-2015\\lib"
                        ],
                        "windows64": [
                            "include": "C:\\OpenSSL-Win64-2015\\include",
                            "lib": "C:\\OpenSSL-Win64-2015\\lib"
                        ]
                    ]
                } else {
                    opensslPaths = [
                        "windows": [
                            "include": "C:\\OpenSSL-Win32-2010\\include",
                            "lib": "C:\\OpenSSL-Win32-2010\\lib"
                        ],
                        "windows64": [
                            "include": "C:\\OpenSSL-Win64-2010\\include",
                            "lib": "C:\\OpenSSL-Win64-2010\\lib"
                        ]
                    ]
                }
                bat """
                    wmic qfe
                    @set PATH="C:\\Python27";"C:\\Python27\\Scripts";%PATH%
                    @set PYTHON="${pythonPath[version]}"

                    @set INCLUDE="${opensslPaths[label]['include']}";%INCLUDE%
                    @set LIB="${opensslPaths[label]['lib']}";%LIB%
                    virtualenv -p %PYTHON% .release
                    call .release\\Scripts\\activate
                    pip install wheel virtualenv
                    pip wheel cryptography==$BUILD_VERSION --no-use-pep517 --wheel-dir=wheelhouse --no-binary cryptography
                    pip install -f wheelhouse cryptography --no-index
                    python -c "from cryptography.hazmat.backends.openssl.backend import backend;print('Loaded: ' + backend.openssl_version_text());print('Linked Against: ' + backend._ffi.string(backend._lib.OPENSSL_VERSION_TEXT).decode('ascii'))"
                """
            }
            archiveArtifacts artifacts: "wheelhouse/cryptography*.whl"
        }
    } finally {
        deleteDir()
    }

}

def builders = [:]
for (config in configs) {
    def label = config["label"]
    def versions = config["versions"]

    for (_version in versions) {
        def version = _version
        def combinedName = "${label}-${version}"
        builders[combinedName] = {
            node(label) {
                stage(combinedName) {
                    build(version, label, "")
                }
            }
        }
    }
}

parallel builders
